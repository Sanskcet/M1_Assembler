<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_instruction___process___methods_8c" kind="file" language="C++">
    <compoundname>Instruction_Process_Methods.c</compoundname>
    <includes local="yes">Instruction_DataTypes.h</includes>
    <includes local="yes">Instruction_Process_Methods.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="2">
        <label>Instruction_DataTypes.h</label>
      </node>
      <node id="1">
        <label>src/Instruction_Process_Methods.c</label>
        <link refid="_instruction___process___methods_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Instruction_Process_Methods.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_instruction___process___methods_8c_1a661805edfd9cea6d20146624e6657f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char nibble_to_hex</definition>
        <argsstring>(int temp)</argsstring>
        <name>nibble_to_hex</name>
        <param>
          <type>int</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="20" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="20" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1a66fae1b2981d06a2536e921b9f02fbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* inttohex</definition>
        <argsstring>(int Hex_Code)</argsstring>
        <name>inttohex</name>
        <param>
          <type>int</type>
          <declname>Hex_Code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="41" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1a03fd8a993f2f6d5e94892dc7900808fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shiftStringLeft</definition>
        <argsstring>(char inst[], int i)</argsstring>
        <name>shiftStringLeft</name>
        <param>
          <type>char</type>
          <declname>inst</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="48" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1ad7ff80b8cae31bd9b26ddfdbf7ebaf67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Remove_Leading_Whitespaces</definition>
        <argsstring>(char inst[])</argsstring>
        <name>Remove_Leading_Whitespaces</name>
        <param>
          <type>char</type>
          <declname>inst</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="57" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1a8af2a0ab895f76ee52341945f3090723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Read_Opcode</definition>
        <argsstring>(char inst[], char *Opcode)</argsstring>
        <name>Read_Opcode</name>
        <param>
          <type>char</type>
          <declname>inst</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char *</type>
          <declname>Opcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="65" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1a9141b4c5ba7be05f14cd036af67d0cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Read_Operand</definition>
        <argsstring>(char inst[], char *Operand_1)</argsstring>
        <name>Read_Operand</name>
        <param>
          <type>char</type>
          <declname>inst</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char *</type>
          <declname>Operand_1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="74" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="74" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1ad5c2458464b2605c633491fac8707834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_Number_of_Operands</definition>
        <argsstring>(char *Opcode)</argsstring>
        <name>get_Number_of_Operands</name>
        <param>
          <type>char *</type>
          <declname>Opcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="91" column="5" bodyfile="src/Instruction_Process_Methods.c" bodystart="91" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="_instruction___process___methods_8c_1a5f587f8b0e89a2d31f97c5b7a36821f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* Read_Instruction</definition>
        <argsstring>(FILE *code, char *inst)</argsstring>
        <name>Read_Instruction</name>
        <param>
          <type>FILE *</type>
          <declname>code</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>inst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Instruction_Process_Methods.c" line="107" column="6" bodyfile="src/Instruction_Process_Methods.c" bodystart="107" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains function definitions for processing the instructions. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sanjeeve R (<ulink url="mailto:18euee122@skcet.ac.in">18euee122@skcet.ac.in</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>0.1 </para>
</simplesect>
<simplesect kind="date"><para>2022-03-30</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2022 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#include<sp/>&quot;Instruction_DataTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Instruction_Process_Methods.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_instruction___process___methods_8c_1a661805edfd9cea6d20146624e6657f18" kindref="member">nibble_to_hex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<sp/>temp<sp/>){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">;</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(char)<sp/>(temp<sp/>+<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="_instruction___process___methods_8c_1a66fae1b2981d06a2536e921b9f02fbdd" kindref="member">inttohex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Hex_Code){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*res<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>calloc(3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>*(res+1)<sp/>=<sp/><ref refid="_instruction___process___methods_8c_1a661805edfd9cea6d20146624e6657f18" kindref="member">nibble_to_hex</ref>(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((Hex_Code)<sp/>&amp;<sp/>(0x0F))<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>*res<sp/>=<sp/><ref refid="_instruction___process___methods_8c_1a661805edfd9cea6d20146624e6657f18" kindref="member">nibble_to_hex</ref>(<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(<sp/>(<sp/>(Hex_Code)<sp/>&amp;<sp/>(0xF0)<sp/>)<sp/>&gt;&gt;<sp/>4<sp/>));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>*(res+2)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_instruction___process___methods_8c_1a03fd8a993f2f6d5e94892dc7900808fe" kindref="member">shiftStringLeft</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inst[],</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i){<sp/></highlight><highlight class="comment">//Shift<sp/>String<sp/>input<sp/>given<sp/>in<sp/>inst<sp/>by<sp/>i<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(i+k)<sp/>&lt;<sp/>strlen(inst)<sp/>){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inst[k]<sp/>=<sp/>inst[k+i];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>inst[k]=</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_instruction___process___methods_8c_1ad7ff80b8cae31bd9b26ddfdbf7ebaf67" kindref="member">Remove_Leading_Whitespaces</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inst[]){<sp/></highlight><highlight class="comment">//Remove<sp/>white<sp/>spaces<sp/>in<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>inst[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1a03fd8a993f2f6d5e94892dc7900808fe" kindref="member">shiftStringLeft</ref>(<sp/>inst,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_instruction___process___methods_8c_1a8af2a0ab895f76ee52341945f3090723" kindref="member">Read_Opcode</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inst[],</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Opcode){<sp/></highlight><highlight class="comment">//Reads<sp/>the<sp/>Opcode<sp/>of<sp/>a<sp/>Instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>inst[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Opcode+i)=inst[i];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1a03fd8a993f2f6d5e94892dc7900808fe" kindref="member">shiftStringLeft</ref>(inst,i);<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1ad7ff80b8cae31bd9b26ddfdbf7ebaf67" kindref="member">Remove_Leading_Whitespaces</ref>(inst);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_instruction___process___methods_8c_1a9141b4c5ba7be05f14cd036af67d0cc6" kindref="member">Read_Operand</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inst[],</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Operand_1){<sp/></highlight><highlight class="comment">//Reads<sp/>Next<sp/>Operand<sp/>of<sp/>an<sp/>Instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>strchr(<sp/>inst,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>c<sp/>==<sp/>NULL<sp/>){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1ad7ff80b8cae31bd9b26ddfdbf7ebaf67" kindref="member">Remove_Leading_Whitespaces</ref>(<sp/>inst<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<sp/>Operand_1,<sp/>inst<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1ad7ff80b8cae31bd9b26ddfdbf7ebaf67" kindref="member">Remove_Leading_Whitespaces</ref>(<sp/>inst<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(<sp/>Operand_1,<sp/>inst,<sp/>(c-inst)<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1ad7ff80b8cae31bd9b26ddfdbf7ebaf67" kindref="member">Remove_Leading_Whitespaces</ref>(<sp/>inst<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_instruction___process___methods_8c_1a03fd8a993f2f6d5e94892dc7900808fe" kindref="member">shiftStringLeft</ref>(<sp/>inst,<sp/>c-inst+1<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_instruction___process___methods_8c_1ad5c2458464b2605c633491fac8707834" kindref="member">get_Number_of_Operands</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Opcode){<sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>number<sp/>of<sp/>Operands<sp/>in<sp/>an<sp/>Instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;RET&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;RETI&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;NOP&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;CJNE&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;DEC&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;INC&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;RR&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;AJMP&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;LJMP&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;SJMP&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;JC&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;JNC&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;JZ&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;JNZ&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;JMP&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;ACALL&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;LCALL&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;CPL&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;CLR&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;SETB&quot;</highlight><highlight class="normal">)<sp/>||<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;PUSH&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;POP&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;DA&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;ORG&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;MUL&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(Opcode,</highlight><highlight class="stringliteral">&quot;DIV&quot;</highlight><highlight class="normal">)<sp/>)<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="_instruction___process___methods_8c_1a5f587f8b0e89a2d31f97c5b7a36821f7" kindref="member">Read_Instruction</ref>(FILE<sp/>*code,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>inst){<sp/></highlight><highlight class="comment">//Reads<sp/>the<sp/>instruction<sp/>in<sp/>the<sp/>current<sp/>line<sp/>pointed<sp/>by<sp/>the<sp/>File<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fgets(inst,26,code);<sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Instruction_Process_Methods.c"/>
  </compounddef>
</doxygen>
